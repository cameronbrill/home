name: Deploy

on:
  push:
    branches: [main, cb/deploy]
  workflow_dispatch:

permissions:
  contents: read

env:
  IMAGE_NAME: home-automation

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubicloud-standard-2
    permissions:
      packages: write
    outputs:
      image_tag: ${{ steps.image.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Output image tag
        id: image
        run: |
          IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n 1)
          echo "tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "Built image: $IMAGE_TAG"

  deploy:
    name: Deploy to ubicloud VM
    runs-on: ubicloud-standard-2
    needs: build-and-push
    steps:
      - name: Mask secrets in logs
        run: |
          echo "::add-mask::${{ secrets.INFISICAL_UBICLOUD_VM_HOST }}"
          echo "::add-mask::${{ secrets.INFISICAL_UBICLOUD_VM_USER }}"
          echo "::add-mask::${{ secrets.INFISICAL_UBICLOUD_SSH_PRIVATE_KEY }}"

      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.INFISICAL_UBICLOUD_SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        env:
          VM_HOST: ${{ secrets.INFISICAL_UBICLOUD_VM_HOST }}
        run: |
          ssh-keyscan -H "$VM_HOST" >> ~/.ssh/known_hosts

      - name: Copy docker-compose.yml to server
        env:
          VM_HOST: ${{ secrets.INFISICAL_UBICLOUD_VM_HOST }}
          VM_USER: ${{ secrets.INFISICAL_UBICLOUD_VM_USER }}
        run: |
          scp docker-compose.yml "$VM_USER@[$VM_HOST]:~/docker-compose.yml"

      - name: Deploy to ubicloud VM
        env:
          IMAGE_TAG: ${{ needs.build-and-push.outputs.image_tag }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
          VM_HOST: ${{ secrets.INFISICAL_UBICLOUD_VM_HOST }}
          VM_USER: ${{ secrets.INFISICAL_UBICLOUD_VM_USER }}
        run: |
          set +x
          ssh "$VM_USER@$VM_HOST" bash << REMOTE_SCRIPT
            set -e
            set +x

            GITHUB_TOKEN="$GITHUB_TOKEN"
            GITHUB_ACTOR="$GITHUB_ACTOR"
            IMAGE_TAG="$IMAGE_TAG"

            if ! command -v docker &> /dev/null; then
              curl -fsSL https://get.docker.com -o get-docker.sh
              sh get-docker.sh
              rm get-docker.sh
            fi

            echo "Checking DNS and network connectivity..."
            GHCR_IPV6=$(dig AAAA ghcr.io +short | head -1)
            GHCR_IPV4=$(dig A ghcr.io +short | head -1)

            if [ -z "$GHCR_IPV6" ] && [ -n "$GHCR_IPV4" ]; then
              echo "ghcr.io only has IPv4 ($GHCR_IPV4), checking IPv4 connectivity..."
              if ! ping -c 1 -W 2 8.8.8.8 > /dev/null 2>&1; then
                echo "No IPv4 connectivity detected. Checking for NAT64/DNS64..."
                NAT64_PREFIX=$(ip -6 route | grep "64:ff9b::/96" | awk '{print $1}' | head -1)
                if [ -n "$NAT64_PREFIX" ]; then
                  echo "NAT64 prefix found: $NAT64_PREFIX"
                  echo "Configuring Docker to use NAT64 for IPv4 destinations..."
                else
                  echo "No NAT64 detected. VM appears to be IPv6-only with no IPv4/NAT64 gateway."
                  echo "You may need to configure NAT64 or IPv4 connectivity on this VM."
                fi
              fi
            fi
            echo ""

            echo "Configuring Docker daemon for IPv6 and extended timeouts..."
            sudo mkdir -p /etc/docker
            if [ -f /etc/docker/daemon.json ]; then
              sudo cp /etc/docker/daemon.json /etc/docker/daemon.json.bak
            fi
            echo '{"ipv6": true}' | sudo tee /etc/docker/daemon.json > /dev/null
            sudo systemctl restart docker || sudo service docker restart
            sleep 3

            echo "Checking system DNS64/NAT64 configuration..."
            RESOLV_CONF_NAMESERVER=$(grep "^nameserver" /etc/resolv.conf | head -1 | awk '{print $2}')
            echo "Current DNS server: $RESOLV_CONF_NAMESERVER"
            echo ""

            for i in {1..3}; do
              echo "Docker login attempt \$i of 3 (120s timeout)..."

              if timeout 120 bash -c "echo '\$GITHUB_TOKEN' | docker login --username '\$GITHUB_ACTOR' --password-stdin ghcr.io" 2>&1; then
                echo "Successfully logged in to ghcr.io"
                break
              fi

              TIMEOUT_ERROR=\$?
              if [ \$TIMEOUT_ERROR -eq 124 ]; then
                echo "Login timed out after 120 seconds"
              else
                echo "Login failed with error code: \$TIMEOUT_ERROR"
              fi

              if [ \$i -eq 3 ]; then
                echo "Failed to login to ghcr.io after 3 attempts"
                echo ""
                echo "Network diagnosis summary:"
                echo "- IPv6 default route:"
                ip -6 route show default || echo "  None configured"
                echo "- IPv4 default route:"
                ip route show default || echo "  None configured"
                echo "- DNS servers:"
                cat /etc/resolv.conf | grep nameserver || echo "  None configured"
                echo "- ghcr.io DNS:"
                echo "  IPv4: $GHCR_IPV4"
                echo "  IPv6: ${GHCR_IPV6:-none}"
                echo ""
                echo "Issue: VM appears to be IPv6-only but ghcr.io is IPv4-only with no connectivity."
                echo "Consider: Configure NAT64 or IPv4 gateway on the ubicloud VM."
                exit 1
              fi
              echo "Retrying in 10 seconds..."
              sleep 10
            done
            docker pull "\$IMAGE_TAG"
            sed -i "s|image:.*|image: \$IMAGE_TAG|" docker-compose.yml
            docker compose down || true
            docker compose up -d
            docker image prune -f

            echo "Deployment complete!"
          REMOTE_SCRIPT

      - name: Verify deployment
        env:
          VM_HOST: ${{ secrets.INFISICAL_UBICLOUD_VM_HOST }}
          VM_USER: ${{ secrets.INFISICAL_UBICLOUD_VM_USER }}
        run: |
          set +x
          ssh "$VM_USER@[$VM_HOST]" bash << 'REMOTE_SCRIPT'
            set -e
            set +x

            sleep 5

            if docker ps | grep -q home-automation; then
              echo "✅ Container is running"
              docker ps | grep home-automation
              echo ""
              echo "Container logs (last 20 lines):"
              docker logs --tail 20 home-automation
            else
              echo "❌ Container is not running"
              docker ps -a | grep home-automation || true
              echo ""
              echo "Container logs:"
              docker logs home-automation || true
              exit 1
            fi
          REMOTE_SCRIPT
